# routers/manage_sources.py
import math
import re

from aiogram.utils.keyboard import InlineKeyboardBuilder
from bson.objectid import ObjectId
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from aiogram.filters.callback_data import CallbackData

from config import ALLOWED_USERS, logger
from database import sources_collection
from states import AddSourceStates

manage_sources_router = Router()

# –°–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
PER_PAGE = 5


# ------------------ CALLBACK DATA ------------------

class SourcePaginationCallback(CallbackData, prefix="src_pag"):
    """
    –ö–æ–ª–±—ç–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    action: str  # "page"
    page: int  # –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1..N)


class SourceActionCallback(CallbackData, prefix="src_act"):
    """
    –ö–æ–ª–±—ç–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º (–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å / –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å / —É–¥–∞–ª–∏—Ç—å).
    """
    action: str  # "activate", "deactivate", "delete"
    source_id: str  # ObjectId –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    page: int  # –ß—Ç–æ–±—ã –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è –º—ã –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ


# ------------------ –õ–û–ì–ò–ö–ê –†–ï–ù–î–ï–†–ò–ù–ì–ê ------------------


def build_sources_page_text(sources: list, page: int, per_page: int = 5) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ).
    """
    total_pages = max(1, math.ceil(len(sources) / per_page))  # —Ö–æ—Ç—è –±—ã 1 —Å—Ç—Ä.
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages

    start_index = (page - 1) * per_page
    end_index = start_index + per_page

    page_slice = sources[start_index:end_index]

    lines = []
    lines.append(f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞** {page}/{total_pages}\n")

    # –ü–µ—Ä–µ—á–∏—Å–ª–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for i, src in enumerate(page_slice, start=1):
        name = src.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        url = src.get("url", "‚Äî")
        is_active = src.get("active", True)
        status = "‚úÖ" if is_active else "üõë"
        lines.append(f"{i}. {name} {status} ({url})")

    # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏)
    if not page_slice:
        lines.append("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")

    return "\n".join(lines)


def build_sources_page_keyboard(sources: list, page: int, per_page: int = PER_PAGE) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç InlineKeyboardMarkup –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.

    :param sources: –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (list)
    :param page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1..)
    :param per_page: —Å–∫–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
    :return: InlineKeyboardMarkup
    """

    builder = InlineKeyboardBuilder()

    # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = math.ceil(len(sources) / per_page) if sources else 1

    if total_pages < 1:
        total_pages = 1

    # –ß—Ç–æ–±—ã –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ —Ä–∞–º–∫–∏
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages

    # –ü–æ–ª—É—á–∏–º –Ω—É–∂–Ω—ã–π —Å—Ä–µ–∑
    start_index = (page - 1) * per_page
    end_index = start_index + per_page
    page_sources = sources[start_index:end_index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    for src in page_sources:
        source_id = str(src["_id"])
        source_url = src["url"]
        source_name = src["name"]
        is_active = src.get("active", True)

        status_icon = "‚úÖ" if is_active else "üõë"
        status_action = "deactivate" if is_active else "activate"

        # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–≤–∞–Ω–∏–µ¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—É—Å—Ç—å callback_data="pass" (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        btn_name = InlineKeyboardButton(
            text=f"{source_name}",
            callback_data="pass"
        )
        # –ö–Ω–æ–ø–∫–∞ ¬´–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å / –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å¬ª
        btn_toggle = InlineKeyboardButton(
            text=status_icon,
            callback_data=SourceActionCallback(
                action=status_action,
                source_id=source_id,
                page=page
            ).pack()
        )
        # –ö–Ω–æ–ø–∫–∞ ¬´–£–¥–∞–ª–∏—Ç—å¬ª
        btn_delete = InlineKeyboardButton(
            text="üóë",
            callback_data=SourceActionCallback(
                action="delete",
                source_id=source_id,
                page=page
            ).pack()
        )

        builder.row(btn_name, btn_toggle, btn_delete)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª –∏ ¬´–í–ø–µ—Ä—ë–¥¬ª (–µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü > 1)
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚Üê –ù–∞–∑–∞–¥",
                callback_data=SourcePaginationCallback(
                    action="page",
                    page=page - 1
                ).pack()
            )
        )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä—ë–¥ ‚Üí",
                callback_data=SourcePaginationCallback(
                    action="page",
                    page=page + 1
                ).pack()
            )
        )

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ¬´N / M¬ª –∫–∞–∫ —Ç–µ–∫—Å—Ç (–±–µ–∑ callback_data)
    if total_pages > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data="pass"
            )
        )

    if nav_buttons:
        builder.row(*nav_buttons)

    kb = builder.as_markup()

    return kb


# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ ------------------
@manage_sources_router.message(AddSourceStates.waiting_for_sources)
async def process_sources(message: Message, state: FSMContext):
    sources_text = message.text
    lines = sources_text.strip().split('\n')
    added_sources = []
    failed_sources = []

    pattern = re.compile(r'^(?P<link>\S+)\s*\(\s*(?P<name>.+?)\s*\)$')

    for line in lines:
        line = line.strip()
        match = pattern.match(line)
        if match:
            link = match.group('link').strip()
            name = match.group('name').strip()
            if not re.match(r'^https?://', link):
                failed_sources.append(f"{line} (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞)")
                continue

            existing_source = sources_collection.find_one({'url': link})
            if existing_source:
                failed_sources.append(f"{link} ({name}) - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue

            sources_collection.insert_one({"url": link, "name": name, "active": True})
            added_sources.append(f"{link} ({name})")
        else:
            failed_sources.append(f"{line} (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)")

    response_messages = []
    if added_sources:
        response_messages.append("–î–æ–±–∞–≤–ª–µ–Ω—ã –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:")
        response_messages.extend(added_sources)
    if failed_sources:
        response_messages.append("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å:")
        response_messages.extend(failed_sources)

    await message.answer('\n'.join(response_messages))
    await state.clear()


# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –°–¢–†–ê–ù–ò–¶ ------------------

@manage_sources_router.callback_query(SourcePaginationCallback.filter())
async def on_pagination_callback(call: CallbackQuery, callback_data: SourcePaginationCallback):
    """
    –ù–∞–∂–∞–ª–∏ "–ù–∞–∑–∞–¥" –∏–ª–∏ "–í–ø–µ—Ä—ë–¥" –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    user_id = call.from_user.id
    if user_id not in ALLOWED_USERS:
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    page = callback_data.page

    sources = list(sources_collection.find())
    text = build_sources_page_text(sources, page=page, per_page=PER_PAGE)
    kb = build_sources_page_keyboard(sources, page=page, per_page=PER_PAGE)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–Ω–æ text + reply_markup
    try:
        await call.message.edit_text(
            text=text,
            reply_markup=kb,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")

    await call.answer()  # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"


# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–ï–ô–°–¢–í–ò–ô –ù–ê–î –ò–°–¢–û–ß–ù–ò–ö–ê–ú–ò ------------------

@manage_sources_router.callback_query(SourceActionCallback.filter())
@manage_sources_router.callback_query(SourceActionCallback.filter())
async def on_source_action_callback(call: CallbackQuery, callback_data: SourceActionCallback):
    """
    –ù–∞–∂–∞–ª–∏ –Ω–∞ ¬´–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å¬ª, ¬´–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å¬ª –∏–ª–∏ ¬´—É–¥–∞–ª–∏—Ç—å¬ª.
    """
    user_id = call.from_user.id
    if user_id not in ALLOWED_USERS:
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    action = callback_data.action
    source_id = callback_data.source_id
    page = callback_data.page

    source = sources_collection.find_one({"_id": ObjectId(source_id)})
    if not source:
        await call.answer("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    name = source.get("name", "?")
    is_active = source.get("active", True)

    if action == "activate":
        sources_collection.update_one({"_id": ObjectId(source_id)}, {"$set": {"active": True}})
        await call.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
    elif action == "deactivate":
        sources_collection.update_one({"_id": ObjectId(source_id)}, {"$set": {"active": False}})
        await call.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
    elif action == "delete":
        sources_collection.delete_one({"_id": ObjectId(source_id)})
        await call.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {name} —É–¥–∞–ª—ë–Ω.", show_alert=True)
    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
        return

    # –°–Ω–æ–≤–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫/–∫–ª–∞–≤—É –¥–ª—è —Ç–æ–≥–æ –∂–µ page
    sources = list(sources_collection.find())

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–¥—Ä—É–≥ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –±–æ–ª—å—à–µ, —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ, —É–º–µ–Ω—å—à–∞–µ–º page
    total_pages = max(1, math.ceil(len(sources) / PER_PAGE))
    if page > total_pages:
        page = total_pages

    text = build_sources_page_text(sources, page=page, per_page=PER_PAGE)
    kb = build_sources_page_keyboard(sources, page=page, per_page=PER_PAGE)

    try:
        await call.message.edit_text(
            text=text,
            reply_markup=kb,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
