# routers/manage_keywords.py
import math

from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bson.objectid import ObjectId
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from config import ALLOWED_USERS
from database import keywords_collection
from states import AddKeywordsStates
from .callbacks import KeywordCallback

manage_keywords_router = Router()


PER_PAGE = 5  # —Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ


# ---------- CALLBACKS ----------

class KeywordPaginationCallback(CallbackData, prefix="kw_pag"):
    action: str  # "page"
    page: int    # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

class KeywordActionCallback(CallbackData, prefix="kw_act"):
    action: str       # –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ "delete"
    keyword_id: str   # ObjectId
    page: int         # –ù–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏–º—Å—è


# ---------- –§–£–ù–ö–¶–ò–ò –†–ï–ù–î–ï–†–ê –¢–ï–ö–°–¢–ê –ò –ö–õ–ê–í–ò–ê–¢–£–†–´ ----------

def build_keywords_page_text(keywords: list, page: int, per_page: int = PER_PAGE) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤–µ—Ä—Ö–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤).
    """
    total_pages = max(1, math.ceil(len(keywords) / per_page))
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages

    start_i = (page - 1) * per_page
    end_i = start_i + per_page
    page_slice = keywords[start_i:end_i]

    lines = []
    lines.append(f"<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞</b> {page}/{total_pages}\n")

    if not page_slice:
        lines.append("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")
    else:
        for i, kw in enumerate(page_slice, start=1):
            kw_text = kw.get("keyword", "")
            lines.append(f"{i}. {kw_text}")

    return "\n".join(lines)


def build_keywords_page_keyboard(keywords: list, page: int, per_page: int = PER_PAGE) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º InlineKeyboardMarkup –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """
    builder = InlineKeyboardBuilder()

    total_pages = max(1, math.ceil(len(keywords) / per_page))
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages

    start_i = (page - 1) * per_page
    end_i = start_i + per_page
    page_slice = keywords[start_i:end_i]

    # –ù–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ: –¢–ï–ö–°–¢ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –∫–Ω–æ–ø–∫–∞ "—É–¥–∞–ª–∏—Ç—å"
    for kw in page_slice:
        kw_id = str(kw["_id"])
        kw_text = kw.get("keyword", "")

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–≤–∞–Ω–∏–µ" (–ø—Ä–æ—Å—Ç–æ pass), –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        btn_name = InlineKeyboardButton(text=kw_text, callback_data="pass")
        # –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"
        btn_del = InlineKeyboardButton(
            text="üóë",
            callback_data=KeywordActionCallback(
                action="delete",
                keyword_id=kw_id,
                page=page
            ).pack()
        )
        builder.row(btn_name, btn_del)

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" / "–í–ø–µ—Ä—ë–¥"
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚Üê –ù–∞–∑–∞–¥",
                callback_data=KeywordPaginationCallback(action="page", page=page-1).pack()
            )
        )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä—ë–¥ ‚Üí",
                callback_data=KeywordPaginationCallback(action="page", page=page+1).pack()
            )
        )
    if total_pages > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data="pass"
            )
        )
    if nav_buttons:
        builder.row(*nav_buttons)

    return builder.as_markup()


# ---------- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–ê–ì–ò–ù–ê–¶–ò–ò (–ù–∞–∑–∞–¥/–í–ø–µ—Ä—ë–¥) ----------

@manage_keywords_router.callback_query(KeywordPaginationCallback.filter())
async def on_keywords_pagination(call: CallbackQuery, callback_data: KeywordPaginationCallback):
    user_id = call.from_user.id
    if user_id not in ALLOWED_USERS:
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    page = callback_data.page
    all_keywords = list(keywords_collection.find())

    text = build_keywords_page_text(all_keywords, page=page, per_page=PER_PAGE)
    kb = build_keywords_page_keyboard(all_keywords, page=page, per_page=PER_PAGE)

    await call.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await call.answer()


# ---------- –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–ï–ô–°–¢–í–ò–ô (–£–î–ê–õ–ò–¢–¨) ----------

@manage_keywords_router.callback_query(KeywordActionCallback.filter())
async def on_keyword_action(call: CallbackQuery, callback_data: KeywordActionCallback):
    user_id = call.from_user.id
    if user_id not in ALLOWED_USERS:
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    if callback_data.action == "delete":
        keyword_doc = keywords_collection.find_one({"_id": ObjectId(callback_data.keyword_id)})
        if keyword_doc:
            keywords_collection.delete_one({"_id": ObjectId(callback_data.keyword_id)})
            await call.answer(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword_doc['keyword']}' —É–¥–∞–ª–µ–Ω–æ.", show_alert=True)
        else:
            await call.answer("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
    page = callback_data.page
    all_keywords = list(keywords_collection.find())
    total_pages = max(1, math.ceil(len(all_keywords) / PER_PAGE))
    if page > total_pages:
        page = total_pages

    text = build_keywords_page_text(all_keywords, page=page, per_page=PER_PAGE)
    kb = build_keywords_page_keyboard(all_keywords, page=page, per_page=PER_PAGE)

    await call.message.edit_text(text, parse_mode="HTML", reply_markup=kb)

@manage_keywords_router.message(AddKeywordsStates.waiting_for_keywords)
async def process_keywords(message: Message, state: FSMContext):
    lines = message.text.strip().split('\n')
    added_keywords = []
    failed_keywords = []

    for line in lines:
        line = line.strip()
        existing = keywords_collection.find_one({'keyword': line})
        if existing:
            failed_keywords.append(f"{line} - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            keywords_collection.insert_one({'keyword': line})
            added_keywords.append(line)

    response = []
    if added_keywords:
        response.append("–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:")
        response.extend(added_keywords)
    if failed_keywords:
        response.append("–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç):")
        response.extend(failed_keywords)

    await message.answer("\n".join(response))
    await state.clear()