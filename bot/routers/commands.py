# routers/commands.py

import re
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from config import ALLOWED_USERS, logger
from database import config_collection, stats_collection, sources_collection, keywords_collection, bans_collection
from states import (
    SetNewsPerHourState,
    SetPublishIntervalState,
    SetMaxNewsLengthState,
    AddSourceStates,
    AddKeywordsStates,
    AddBanStates
)
from .callbacks import KeywordCallback, BanCallback

from routers.manage_sources import build_sources_page_keyboard, build_sources_page_text

PER_PAGE = 5

commands_router = Router()


@commands_router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.")


@commands_router.message(Command("stats"))
async def cmd_stats(message: Message):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    now = datetime.utcnow()
    one_hour_ago = now - timedelta(hours=1)
    stats = stats_collection.find({"timestamp": {"$gte": one_hour_ago}})

    total_sent = sum(stat['sent_count'] for stat in stats)

    await message.answer(f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_sent} –Ω–æ–≤–æ—Å—Ç–µ–π.")


# ----------- –ü—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ FSM ------------

@commands_router.message(Command("set_news_per_interval"))
async def set_news_per_hour_command(message: Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª:")
    await state.set_state(SetNewsPerHourState.waiting_for_number)


@commands_router.message(SetNewsPerHourState.waiting_for_number)
async def process_news_per_hour(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    news_per_hour = int(message.text)
    config_collection.update_one(
        {"_id": "bot_config"},
        {"$set": {"news_per_hour": news_per_hour}},
        upsert=True
    )
    await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {news_per_hour}.")
    await state.clear()


@commands_router.message(Command("set_publish_interval"))
async def set_publish_interval_command(message: Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")
    await state.set_state(SetPublishIntervalState.waiting_for_interval)


@commands_router.message(SetPublishIntervalState.waiting_for_interval)
async def process_publish_interval(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö).")
        return

    publish_interval = int(message.text)
    if publish_interval <= 0:
        await message.answer("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    config_collection.update_one(
        {"_id": "bot_config"},
        {"$set": {"publish_interval": publish_interval}},
        upsert=True
    )
    await message.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {publish_interval} —Å–µ–∫—É–Ω–¥.")
    await state.clear()


@commands_router.message(Command("set_max_news_length"))
async def set_max_news_length_command(message: Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏ (–≤ —Å–∏–º–≤–æ–ª–∞—Ö):")
    await state.set_state(SetMaxNewsLengthState.waiting_for_length)


@commands_router.message(SetMaxNewsLengthState.waiting_for_length)
async def process_max_news_length(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    max_news_length = int(message.text)
    if max_news_length <= 0 or max_news_length > 4096:
        await message.answer("–î–ª–∏–Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏ ‚â§ 4096 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    config_collection.update_one(
        {"_id": "bot_config"},
        {"$set": {"max_news_length": max_news_length}},
        upsert=True
    )
    await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {max_news_length} —Å–∏–º–≤–æ–ª–æ–≤.")
    await state.clear()


# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–°–¢–û–ß–ù–ò–ö–û–í ------------------

@commands_router.message(Command("add_sources"))
async def add_source_command(message: Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "—Å—Å—ã–ª–∫–∞ (–ù–∞–∑–≤–∞–Ω–∏–µ)\n\n"
        "–ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –ø–æ–¥—Ä—è–¥."
    )
    await state.set_state(AddSourceStates.waiting_for_sources)


@commands_router.message(Command("manage_sources"))
async def cmd_manage_sources(message: Message):
    """
    –ü—Ä–∏ –≤–≤–æ–¥–µ /manage_sources –≤—ã–¥–∞—ë–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (1-—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞).
    """
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    sources = list(sources_collection.find())
    page = 1

    text = build_sources_page_text(sources, page=page, per_page=PER_PAGE)
    kb = build_sources_page_keyboard(sources, page=page, per_page=PER_PAGE)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç + –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(text, reply_markup=kb, parse_mode="Markdown", disable_web_page_preview=True)


# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í ------------------

@commands_router.message(Command("add_keywords"))
async def add_keywords_command(message: Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É."
    )
    await state.set_state(AddKeywordsStates.waiting_for_keywords)


@commands_router.message(Command("manage_keywords"))
async def manage_keywords(message: Message):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    keywords = list(keywords_collection.find())
    if not keywords:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.")
        return

    for kw in keywords:
        kw_id = str(kw['_id'])
        kw_text = kw['keyword']

        buttons = [[
            InlineKeyboardButton(
                text='üóë',
                callback_data=KeywordCallback(action='delete', keyword_id=kw_id).pack()
            )
        ]]
        await message.answer(
            kw_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )


# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô ------------------

@commands_router.message(Command("add_banwords"))
async def add_banwords_command(message: Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–±–∞–Ω-—Å–ª–æ–≤), –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É."
    )
    await state.set_state(AddBanStates.waiting_for_bans)


@commands_router.message(Command("manage_bans"))
async def manage_bans(message: Message):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    bans = list(bans_collection.find())
    if not bans:
        await message.answer("–°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—É—Å—Ç.")
        return

    for ban in bans:
        ban_id = str(ban['_id'])
        ban_text = ban['keyword']

        buttons = [[
            InlineKeyboardButton(
                text='üóë',
                callback_data=BanCallback(action='delete', ban_id=ban_id).pack()
            )
        ]]
        await message.answer(
            ban_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
